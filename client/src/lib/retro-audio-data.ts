import { AudioFileData } from './audio-data';

export interface RetroAudioFileData extends AudioFileData {
  retroStyle: 'arcade' | 'nes' | 'gameboy' | 'c64';
  chipType: 'square1' | 'square2' | 'triangle' | 'noise' | 'pulse';
  pitchBend?: boolean;
  arpeggio?: boolean;
  dutyCycle?: number; // For pulse waves
}

// Create retro versions of all original audio files
export const retroAudioFilesData: RetroAudioFileData[] = [
  // Standard Sound Effects - Retro versions
  {
    filename: 'click.mp3',
    category: 'standard',
    description: 'Retro arcade button click',
    usage: 'Triggered on all button interactions',
    icon: 'mouse-pointer',
    colorScheme: 'secondary',
    frequency: 800,
    waveType: 'square',
    duration: 0.1,
    retroStyle: 'arcade',
    chipType: 'square1',
    pitchBend: false,
  },
  {
    filename: 'win.mp3',
    category: 'standard',
    description: 'Retro victory fanfare',
    usage: 'Player wins a single round',
    icon: 'trophy',
    colorScheme: 'success',
    notes: [523, 659, 784, 1047], // C, E, G, C
    duration: 1.2,
    retroStyle: 'nes',
    chipType: 'square1',
    arpeggio: true,
  },
  {
    filename: 'lose.mp3',
    category: 'standard',
    description: 'Retro defeat sound',
    usage: 'Player loses a single round',
    icon: 'x',
    colorScheme: 'error',
    frequency: 200,
    waveType: 'triangle',
    duration: 0.8,
    retroStyle: 'nes',
    chipType: 'triangle',
    pitchBend: true,
  },
  {
    filename: 'draw.mp3',
    category: 'standard',
    description: 'Retro tie sound',
    usage: 'Round ends in a tie',
    icon: 'equal',
    colorScheme: 'warning',
    frequency: 440,
    waveType: 'square',
    duration: 0.6,
    retroStyle: 'gameboy',
    chipType: 'pulse',
    dutyCycle: 0.25,
  },
  {
    filename: 'gameStart.mp3',
    category: 'standard',
    description: 'Retro game start jingle',
    usage: 'When new game session begins',
    icon: 'flag',
    colorScheme: 'secondary',
    notes: [392, 523, 659], // G, C, E
    duration: 1.5,
    retroStyle: 'arcade',
    chipType: 'square1',
    arpeggio: false,
  },
  {
    filename: 'gameWin.mp3',
    category: 'standard',
    description: 'Retro complete victory',
    usage: 'Player wins the entire game',
    icon: 'crown',
    colorScheme: 'success',
    notes: [523, 659, 784, 1047, 1319], // Victory fanfare
    duration: 2.5,
    retroStyle: 'nes',
    chipType: 'square1',
    arpeggio: true,
  },
  {
    filename: 'gameLose.mp3',
    category: 'standard',
    description: 'Retro game over sound',
    usage: 'Player loses the entire game',
    icon: 'skull',
    colorScheme: 'error',
    frequency: 150,
    waveType: 'triangle',
    duration: 2.0,
    retroStyle: 'arcade',
    chipType: 'triangle',
    pitchBend: true,
  },
  {
    filename: 'gameDraw.mp3',
    category: 'standard',
    description: 'Retro game tie ending',
    usage: 'Game ends with no winner',
    icon: 'minus',
    colorScheme: 'warning',
    frequency: 330,
    waveType: 'square',
    duration: 1.8,
    retroStyle: 'c64',
    chipType: 'pulse',
    dutyCycle: 0.5,
  },
  {
    filename: 'countdown.mp3',
    category: 'standard',
    description: 'Retro countdown beeping',
    usage: 'During countdown sequences',
    icon: 'clock',
    colorScheme: 'secondary',
    frequency: 1000,
    waveType: 'square',
    duration: 3.0,
    retroStyle: 'arcade',
    chipType: 'square2',
    pitchBend: false,
  },
  {
    filename: 'tick.mp3',
    category: 'standard',
    description: 'Retro clock tick',
    usage: 'Each second during countdown',
    icon: 'clock-3',
    colorScheme: 'neutral',
    frequency: 800,
    waveType: 'square',
    duration: 0.1,
    retroStyle: 'gameboy',
    chipType: 'pulse',
    dutyCycle: 0.125,
  },
  {
    filename: 'timeUp.mp3',
    category: 'standard',
    description: 'Retro time expired alarm',
    usage: 'When time runs out',
    icon: 'alarm-clock',
    colorScheme: 'error',
    frequency: 600,
    waveType: 'square',
    duration: 1.0,
    retroStyle: 'nes',
    chipType: 'noise',
    pitchBend: true,
  },
  {
    filename: 'bonusRound.mp3',
    category: 'standard',
    description: 'Retro bonus round jingle',
    usage: 'Special bonus round activation',
    icon: 'star',
    colorScheme: 'warning',
    notes: [659, 784, 880, 1047], // Special bonus melody
    duration: 2.0,
    retroStyle: 'arcade',
    chipType: 'square1',
    arpeggio: true,
  },
  {
    filename: 'chaos.mp3',
    category: 'standard',
    description: 'Retro chaos mode activation',
    usage: 'When chaos mode is triggered',
    icon: 'zap',
    colorScheme: 'error',
    frequency: 100,
    waveType: 'square',
    duration: 1.5,
    retroStyle: 'c64',
    chipType: 'noise',
    pitchBend: true,
  },
  // Ambient Loops - Retro versions
  {
    filename: 'hum.mp3',
    category: 'ambient',
    description: 'Retro electric hum loop',
    usage: 'Background atmosphere during gameplay',
    icon: 'zap',
    colorScheme: 'neutral',
    frequency: 60,
    waveType: 'triangle',
    duration: 10.0,
    isLoop: true,
    retroStyle: 'c64',
    chipType: 'triangle',
    pitchBend: false,
  },
  {
    filename: 'wind.mp3',
    category: 'ambient',
    description: 'Retro wind sound loop',
    usage: 'Atmospheric wind during dramatic moments',
    icon: 'wind',
    colorScheme: 'cyan',
    frequency: 200,
    waveType: 'square',
    duration: 15.0,
    isLoop: true,
    retroStyle: 'gameboy',
    chipType: 'noise',
    pitchBend: false,
  },
  {
    filename: 'lo-fi-loop.mp3',
    category: 'ambient',
    description: 'Retro chiptune music loop',
    usage: 'Background music for relaxed gameplay',
    icon: 'disc',
    colorScheme: 'purple',
    notes: [220, 277, 330, 370], // Lo-fi chord progression
    duration: 20.0,
    isLoop: true,
    retroStyle: 'nes',
    chipType: 'square1',
    arpeggio: false,
  },
];

// Mapping for retro sound characteristics
export const retroSoundProfiles = {
  arcade: {
    bitDepth: 8,
    sampleRate: 22050,
    quantizationLevels: 15,
    envelope: 'sharp',
  },
  nes: {
    bitDepth: 8,
    sampleRate: 22050,
    quantizationLevels: 15,
    envelope: 'medium',
    pulseWidth: [0.125, 0.25, 0.5, 0.75],
  },
  gameboy: {
    bitDepth: 4,
    sampleRate: 16384,
    quantizationLevels: 7,
    envelope: 'sharp',
    pulseWidth: [0.125, 0.25, 0.5, 0.75],
  },
  c64: {
    bitDepth: 8,
    sampleRate: 22050,
    quantizationLevels: 15,
    envelope: 'smooth',
    filterCutoff: 1000,
  },
};